buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'de.huxhorn.gradle:de.huxhorn.gradle.pgp-plugin:0.0.3'
	}
}


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'sign'
apply plugin: de.huxhorn.gradle.pgp.PgpPlugin

group = "com.github.insubstantial"
version = "6.3-SNAPSHOT"
versionKey = "6.3-defender-SNAPSHOT"
swingXVersion = "1.6.1"
release = "internal"
timeStamp = new Date().format("MMMM d, yyyy HH:mm:ss z")

sourceCompatibility = 1.6
targetCompatibility = 1.6

configurations {
  testCompile { extendsFrom compile }
  toolsCompile { extendsFrom compile }
}

sourceSets {
  main
  // gradle bug - cannont include two different classifiers of the same dependency
  //test
  //tools {
    //compileClasspath = sourceSets.main.classes + sourceSets.test.classes + configurations.toolsCompile + configurations.testCompile
  //}
}

repositories {
  mavenRepo name: 'sonatype staging', urls: 'https://oss.sonatype.org/content/groups/staging'
  mavenCentral()
  mavenRepo urls: new File(System.getProperty('user.home'), '.m2/repository').toURI().toString()
}

dependencies {
  compile group:'com.github.insubstantial', name:'substance', version: version
  compile group:'org.swinglabs', name:'swingx', version: swingXVersion
  testCompile files('lib/substance-6.2-tst-hack.jar')
  testCompile group:'com.jgoodies', name:'forms', version:'1.2.0'
  toolsCompile group:'com.github.insubstantial', name:'substance', version: version, ext:'tools'
  toolsCompile group:'org.easytesting', name:'fest-swing', version:'1.2'
}

task augmentation(dependsOn: classes) {
  description = "Performs code augmentaiton for the laf-plugin and laf-widget libraries on the substance jar classes"

  doLast {
    // Explode laf-plugin and laf-widget
//        copy {
//            from zipTree('lib/build/laf-plugin.jar')
//            into sourceSets.main.classesDir
//        }
//        copy {
//            from zipTree('lib/build/laf-widget.jar')
//            into sourceSets.main.classesDir
//        }


    augmentClassPath = configurations.toolsCompile.asPath + File.pathSeparator + configurations.compile.asPath

    ant.taskdef(name: 'delegate-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentTask", classpath: augmentClassPath)
    ant.taskdef(name: 'delegate-update-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentUpdateTask", classpath: augmentClassPath)
    ant.taskdef(name: 'laf-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentMainTask", classpath: augmentClassPath)
    ant.taskdef(name: 'icon-ghosting-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentIconGhostingTask", classpath: augmentClassPath)
    ant.taskdef(name: 'container-ghosting-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentContainerGhostingTask", classpath: augmentClassPath)

    verboseAugmentation = false

    //LAF augmentation
    //ant.'laf-augment'(verbose: verboseAugmentaiton, mainlafclassname:"org.pushingpixels.substance.api.SubstanceLookAndFeel") {
    //    classpathset(dir:sourceSets.main.classesDir)
    //    delegate(name:"ViewportUI")
    //}

    // Delegate augmentation
    ant.'delegate-update-augment'(verbose: verboseAugmentation, pattern: ".*UI\u002Eclass") {
      classpathset(dir: sourceSets.main.classesDir)
    }

    ant.'delegate-augment'(verbose: verboseAugmentation, pattern: ".*UI\u002Eclass") {
      classpathset(dir: sourceSets.main.classesDir)
    }

    // Container ghosting augmentation
    ant.'container-ghosting-augment'(verbose: verboseAugmentation) {
      classpathset(dir: sourceSets.main.classesDir)
      containerghosting(className: "org.pushingpixels.substance.swingx.SubstanceStatusBarUI", toInjectAfterOriginal: "true")
      containerghosting(className: "org.pushingpixels.substance.swingx.SubstanceTaskPaneContainerUI", toInjectAfterOriginal: "true")
    }
  }
}

jar {
  dependsOn augmentation
  //dependsOn toolsClasses

  manifest {
    attributes(
      "Substance-Version": version,
      "SwingX-Version": swingXVersion,
      "Substance-VersionName": versionKey,
      "Substance-SwingX-BuildStamp": timeStamp
    )
  }

}

task testJar(type: Jar) {
  classifier = 'tst'

  from sourceSets.test.classes

  manifest {
    attributes(
      "Substance-Version": version,
      "Flamingo-Version": version,
      "Substance-VersionName": versionKey,
      "Flamingo-VersionName": versionKey,
      "Substance-BuildStamp": timeStamp
    )
  }
}

task distroJar(type: Jar) {
  //dependsOn toolsJar, testJar, jar
  dependsOn jar
  classifier = 'all'
  from(projectDir)
  include "lib/**"
  include "src/**"
  include "www/**/*.html"
  include "www/docs/**"
  include "www/images/**"
  include "gradle.properties"
  include "build.gradle"
}

//allSubstanceJars = [toolsJar, liteJar, testJar, testLiteJar, distroJar]

//uploadArchives.dependsOn << allSubstanceJars
//assemble.dependsOn << allSubstanceJars

task sourceJar(type: Jar) {
  from sourceSets.main.java
  from sourceSets.main.resources
  classifier = 'sources'
}

task javadocJar(type: Jar) {
  dependsOn javadoc
  from javadoc.destinationDir
  classifier = 'javadoc'
}

artifacts {
  archives sourceJar
  archives javadocJar
  //archives toolsJar
  //archives liteJar
}

uploadArchives {
  try {
    def x = [deployUsername, deployPassword]
  } catch (Exception e) {
    deployUsername = 'unset'
    deployPassword = ''
  }
  repositories {
    mavenDeployer {
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication userName: deployUsername, password: deployPassword
      }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication userName: deployUsername, password: deployPassword
      }
      pom.project {
        modelVersion '4.0.0'
        packaging 'jar'
        name "insubstantialSwingX"
        description "A fork of @kirilcool's substance project"
        url "http://insubstantial.github.com/insubstantialSwingX"
        licenses {
          license {
            name 'BSD License'
            url 'http://www.opensource.org/licenses/bsd-license.php'
            distribution 'repo'
            comments "Does not cover the Xoetrope Color Wheel"
          }
          license {
            name 'Mozilla Public License 1.1'
            url 'http://www.opensource.org/licenses/mozilla1.1'
            distribution 'repo'
            comments "Covers the Xoetrope Color Wheel"
          }
        }
        scm {
          connection 'scm:git:git@github.com:Insubstantial/insubstantialPeacock.git'
          developerConnection 'scm:git:git@github.com:Insubstantial/insubstantialPeacock.git'
          url 'scm:git:git@github.com:Insubstantial/insubstantialPeacock.git'
        }
        developers {
          developer {
            name 'Kirill Grouchnikov'
            email 'kirillcool@yahoo.com'
            roles {
              role 'author'
              role 'developer'
            }
          }
          developer {
            name 'Danno Ferrin'
            email 'danno.ferrin@shemnon.com'
            roles {
              role 'maintainer'
            }
          }
        }
      }
    }
  }
}


    
